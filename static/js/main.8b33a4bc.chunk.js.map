{"version":3,"sources":["App.tsx","components/goodList.tsx","index.tsx"],"names":["SortField","GoodList","goods","map","good","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","preparedGoods","sort","good1","good2","ALPHABETICALLY","localeCompare","LENGTH","length","reverse","getPreparedGoods","isResetButtonVisible","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0ECHUC,EAVmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChC,4BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,SDHjBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,K,sBAAAA,E,iBAAAA,M,KAkCE,IAAMM,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SACEV,EACAM,EACAE,GAEA,IAAMG,EAAa,YAAOX,GAqB1B,OAnBIM,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKR,EAAUiB,eACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKhB,EAAUmB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXV,GACFG,EAAcQ,UAGTR,EAMcS,CAAiBjB,EAAiBG,EAAWE,GAC5Da,EAAuBf,GAAaE,EAM1C,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAG,SAAU,UACX,CAAE,WAAYlB,IAAcR,EAAUiB,iBAE1CU,QAAS,kBAAMlB,EAAaT,EAAUiB,iBANxC,iCAWA,wBACEQ,KAAK,SACLD,UACEE,IAAG,SAAU,aACX,CAAE,WAAYlB,IAAcR,EAAUmB,SAE1CQ,QAAS,kBAAMlB,EAAaT,EAAUmB,SANxC,4BAYA,wBACEM,KAAK,SACLD,UACEE,IAAG,SAAU,aAAc,CAAE,YAAahB,IAE5CiB,QAAS,kBAAMhB,GAAeD,IALhC,qBAWCa,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA9CM,WACdlB,EAAa,IACbE,GAAc,IAyCR,sBAUJ,6BACE,cAAC,EAAD,CACET,MAAOU,UE9GjBgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8b33a4bc.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport GoodList from './components/goodList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  ALPHABETICALLY = 'name',\n  LENGTH = 'length',\n}\n\nfunction getPreparedGoods(\n  goods:string[],\n  sortField:string,\n  isReversed:boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        case SortField.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n  const isResetButtonVisible = sortField || isReversed;\n  const onReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-info',\n              { 'is-light': sortField !== SortField.ALPHABETICALLY })\n          }\n          onClick={() => setSortField(SortField.ALPHABETICALLY)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-success',\n              { 'is-light': sortField !== SortField.LENGTH })\n          }\n          onClick={() => setSortField(SortField.LENGTH)}\n\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-warning', { 'is-light': !isReversed })\n          }\n          onClick={() => setIsReversed(!isReversed)}\n\n        >\n          Reverse\n        </button>\n\n        {isResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={onReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <GoodList\n          goods={visibleGoods}\n        />\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  goods: string[];\n};\n\nconst GoodList: React.FC<Props> = ({ goods }) => (\n  <u>\n    {goods.map(good => (\n      <li data-cy=\"Good\" key={good}>\n        {good}\n      </li>\n    ))}\n  </u>\n);\n\nexport default GoodList;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}